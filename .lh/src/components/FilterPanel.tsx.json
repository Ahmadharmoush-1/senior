{
    "sourceFile": "src/components/FilterPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759427901652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759428228002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n             <Button variant=\"outline\" onClick={resetFilters} className=\"flex-1\">\r\n               <X className=\"h-4 w-4 mr-2\" />\r\n               Reset\r\n             </Button>\r\n-            <Button variant=\"accent\" onClick={applyFilters} className=\"flex-1\">\r\n+            <Button variant=\"default\" onClick={applyFilters} className=\"flex-1\">\r\n               Apply Filters\r\n             </Button>\r\n           </div>\r\n         </div>\r\n"
                }
            ],
            "date": 1759427901652,
            "name": "Commit-0",
            "content": "import { useState } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Slider } from \"@/components/ui/slider\";\r\nimport { SlidersHorizontal, X } from \"lucide-react\";\r\nimport { FilterOptions } from \"@/lib/filterUtils\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\n\r\ninterface FilterPanelProps {\r\n  filters: FilterOptions;\r\n  onFiltersChange: (filters: FilterOptions) => void;\r\n  availableBrands: string[];\r\n}\r\n\r\nconst FilterPanel = ({ filters, onFiltersChange, availableBrands }: FilterPanelProps) => {\r\n  const [localFilters, setLocalFilters] = useState(filters);\r\n\r\n  const handleBrandToggle = (brand: string) => {\r\n    const newBrands = localFilters.brands.includes(brand)\r\n      ? localFilters.brands.filter((b) => b !== brand)\r\n      : [...localFilters.brands, brand];\r\n    setLocalFilters({ ...localFilters, brands: newBrands });\r\n  };\r\n\r\n  const handleConditionToggle = (condition: string) => {\r\n    const newConditions = localFilters.conditions.includes(condition)\r\n      ? localFilters.conditions.filter((c) => c !== condition)\r\n      : [...localFilters.conditions, condition];\r\n    setLocalFilters({ ...localFilters, conditions: newConditions });\r\n  };\r\n\r\n  const handleFuelTypeToggle = (fuelType: string) => {\r\n    const newFuelTypes = localFilters.fuelTypes.includes(fuelType)\r\n      ? localFilters.fuelTypes.filter((f) => f !== fuelType)\r\n      : [...localFilters.fuelTypes, fuelType];\r\n    setLocalFilters({ ...localFilters, fuelTypes: newFuelTypes });\r\n  };\r\n\r\n  const handleTransmissionToggle = (transmission: string) => {\r\n    const newTransmissions = localFilters.transmissions.includes(transmission)\r\n      ? localFilters.transmissions.filter((t) => t !== transmission)\r\n      : [...localFilters.transmissions, transmission];\r\n    setLocalFilters({ ...localFilters, transmissions: newTransmissions });\r\n  };\r\n\r\n  const applyFilters = () => {\r\n    onFiltersChange(localFilters);\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    const defaultFilters: FilterOptions = {\r\n      searchTerm: \"\",\r\n      brands: [],\r\n      minPrice: 0,\r\n      maxPrice: 100000,\r\n      minYear: 2015,\r\n      maxYear: 2025,\r\n      minMileage: 0,\r\n      maxMileage: 150000,\r\n      conditions: [],\r\n      fuelTypes: [],\r\n      transmissions: [],\r\n      sortBy: \"newest\",\r\n    };\r\n    setLocalFilters(defaultFilters);\r\n    onFiltersChange(defaultFilters);\r\n  };\r\n\r\n  const activeFiltersCount =\r\n    localFilters.brands.length +\r\n    localFilters.conditions.length +\r\n    localFilters.fuelTypes.length +\r\n    localFilters.transmissions.length;\r\n\r\n  return (\r\n    <Sheet>\r\n      <SheetTrigger asChild>\r\n        <Button variant=\"outline\" size=\"lg\" className=\"gap-2\">\r\n          <SlidersHorizontal className=\"h-5 w-5\" />\r\n          Filters\r\n          {activeFiltersCount > 0 && (\r\n            <Badge variant=\"default\" className=\"ml-1\">\r\n              {activeFiltersCount}\r\n            </Badge>\r\n          )}\r\n        </Button>\r\n      </SheetTrigger>\r\n      <SheetContent className=\"w-[400px] sm:w-[540px] overflow-y-auto\">\r\n        <SheetHeader>\r\n          <SheetTitle>Filter Cars</SheetTitle>\r\n        </SheetHeader>\r\n\r\n        <div className=\"mt-6 space-y-6\">\r\n          {/* Brand */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">Brand</Label>\r\n            <div className=\"space-y-2\">\r\n              {availableBrands.map((brand) => (\r\n                <div key={brand} className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id={`brand-${brand}`}\r\n                    checked={localFilters.brands.includes(brand)}\r\n                    onCheckedChange={() => handleBrandToggle(brand)}\r\n                  />\r\n                  <label htmlFor={`brand-${brand}`} className=\"text-sm cursor-pointer\">\r\n                    {brand}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Price Range */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">\r\n              Price Range: ${localFilters.minPrice.toLocaleString()} - $\r\n              {localFilters.maxPrice.toLocaleString()}\r\n            </Label>\r\n            <Slider\r\n              min={0}\r\n              max={100000}\r\n              step={5000}\r\n              value={[localFilters.minPrice, localFilters.maxPrice]}\r\n              onValueChange={(value) =>\r\n                setLocalFilters({ ...localFilters, minPrice: value[0], maxPrice: value[1] })\r\n              }\r\n            />\r\n          </div>\r\n\r\n          {/* Year Range */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">\r\n              Year: {localFilters.minYear} - {localFilters.maxYear}\r\n            </Label>\r\n            <Slider\r\n              min={2015}\r\n              max={2025}\r\n              step={1}\r\n              value={[localFilters.minYear, localFilters.maxYear]}\r\n              onValueChange={(value) =>\r\n                setLocalFilters({ ...localFilters, minYear: value[0], maxYear: value[1] })\r\n              }\r\n            />\r\n          </div>\r\n\r\n          {/* Mileage Range */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">\r\n              Mileage: {localFilters.minMileage.toLocaleString()} -{\" \"}\r\n              {localFilters.maxMileage.toLocaleString()} mi\r\n            </Label>\r\n            <Slider\r\n              min={0}\r\n              max={150000}\r\n              step={5000}\r\n              value={[localFilters.minMileage, localFilters.maxMileage]}\r\n              onValueChange={(value) =>\r\n                setLocalFilters({ ...localFilters, minMileage: value[0], maxMileage: value[1] })\r\n              }\r\n            />\r\n          </div>\r\n\r\n          {/* Condition */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">Condition</Label>\r\n            <div className=\"space-y-2\">\r\n              {[\"new\", \"used\", \"certified\"].map((condition) => (\r\n                <div key={condition} className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id={`condition-${condition}`}\r\n                    checked={localFilters.conditions.includes(condition)}\r\n                    onCheckedChange={() => handleConditionToggle(condition)}\r\n                  />\r\n                  <label htmlFor={`condition-${condition}`} className=\"text-sm cursor-pointer capitalize\">\r\n                    {condition}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Fuel Type */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">Fuel Type</Label>\r\n            <div className=\"space-y-2\">\r\n              {[\"gasoline\", \"diesel\", \"electric\", \"hybrid\"].map((fuel) => (\r\n                <div key={fuel} className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id={`fuel-${fuel}`}\r\n                    checked={localFilters.fuelTypes.includes(fuel)}\r\n                    onCheckedChange={() => handleFuelTypeToggle(fuel)}\r\n                  />\r\n                  <label htmlFor={`fuel-${fuel}`} className=\"text-sm cursor-pointer capitalize\">\r\n                    {fuel}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Transmission */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-base font-semibold\">Transmission</Label>\r\n            <div className=\"space-y-2\">\r\n              {[\"automatic\", \"manual\"].map((trans) => (\r\n                <div key={trans} className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id={`trans-${trans}`}\r\n                    checked={localFilters.transmissions.includes(trans)}\r\n                    onCheckedChange={() => handleTransmissionToggle(trans)}\r\n                  />\r\n                  <label htmlFor={`trans-${trans}`} className=\"text-sm cursor-pointer capitalize\">\r\n                    {trans}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"flex gap-3 pt-4\">\r\n            <Button variant=\"outline\" onClick={resetFilters} className=\"flex-1\">\r\n              <X className=\"h-4 w-4 mr-2\" />\r\n              Reset\r\n            </Button>\r\n            <Button variant=\"accent\" onClick={applyFilters} className=\"flex-1\">\r\n              Apply Filters\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </SheetContent>\r\n    </Sheet>\r\n  );\r\n};\r\n\r\nexport default FilterPanel;\r\n"
        }
    ]
}