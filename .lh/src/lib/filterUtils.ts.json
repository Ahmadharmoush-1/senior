{
    "sourceFile": "src/lib/filterUtils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759427976051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759428246011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   sortBy: \"price-asc\" | \"price-desc\" | \"year-desc\" | \"mileage-asc\" | \"newest\";\r\n }\r\n \r\n export const filterCars = (cars: Car[], filters: FilterOptions): Car[] => {\r\n-  let filtered = cars.filter((car) => {\r\n+  const filtered = cars.filter((car) => {\r\n     // Search term\r\n     if (\r\n       filters.searchTerm &&\r\n       !car.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) &&\r\n"
                }
            ],
            "date": 1759427976051,
            "name": "Commit-0",
            "content": "import { Car } from \"@/types/car\";\r\n\r\nexport interface FilterOptions {\r\n  searchTerm: string;\r\n  brands: string[];\r\n  minPrice: number;\r\n  maxPrice: number;\r\n  minYear: number;\r\n  maxYear: number;\r\n  minMileage: number;\r\n  maxMileage: number;\r\n  conditions: string[];\r\n  fuelTypes: string[];\r\n  transmissions: string[];\r\n  sortBy: \"price-asc\" | \"price-desc\" | \"year-desc\" | \"mileage-asc\" | \"newest\";\r\n}\r\n\r\nexport const filterCars = (cars: Car[], filters: FilterOptions): Car[] => {\r\n  let filtered = cars.filter((car) => {\r\n    // Search term\r\n    if (\r\n      filters.searchTerm &&\r\n      !car.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) &&\r\n      !car.brand.toLowerCase().includes(filters.searchTerm.toLowerCase()) &&\r\n      !car.model.toLowerCase().includes(filters.searchTerm.toLowerCase())\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // Brand filter\r\n    if (filters.brands.length > 0 && !filters.brands.includes(car.brand)) {\r\n      return false;\r\n    }\r\n\r\n    // Price range\r\n    if (car.price < filters.minPrice || car.price > filters.maxPrice) {\r\n      return false;\r\n    }\r\n\r\n    // Year range\r\n    if (car.year < filters.minYear || car.year > filters.maxYear) {\r\n      return false;\r\n    }\r\n\r\n    // Mileage range\r\n    if (car.mileage < filters.minMileage || car.mileage > filters.maxMileage) {\r\n      return false;\r\n    }\r\n\r\n    // Condition\r\n    if (filters.conditions.length > 0 && !filters.conditions.includes(car.condition)) {\r\n      return false;\r\n    }\r\n\r\n    // Fuel type\r\n    if (filters.fuelTypes.length > 0 && car.fuelType && !filters.fuelTypes.includes(car.fuelType)) {\r\n      return false;\r\n    }\r\n\r\n    // Transmission\r\n    if (\r\n      filters.transmissions.length > 0 &&\r\n      car.transmission &&\r\n      !filters.transmissions.includes(car.transmission)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\n  // Sorting\r\n  switch (filters.sortBy) {\r\n    case \"price-asc\":\r\n      filtered.sort((a, b) => a.price - b.price);\r\n      break;\r\n    case \"price-desc\":\r\n      filtered.sort((a, b) => b.price - a.price);\r\n      break;\r\n    case \"year-desc\":\r\n      filtered.sort((a, b) => b.year - a.year);\r\n      break;\r\n    case \"mileage-asc\":\r\n      filtered.sort((a, b) => a.mileage - b.mileage);\r\n      break;\r\n    case \"newest\":\r\n      filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\r\n      break;\r\n  }\r\n\r\n  return filtered;\r\n};\r\n\r\nexport const getSimilarCars = (car: Car, allCars: Car[], limit: number = 3): Car[] => {\r\n  return allCars\r\n    .filter((c) => c.id !== car.id)\r\n    .map((c) => {\r\n      let score = 0;\r\n      \r\n      // Same brand gets high score\r\n      if (c.brand === car.brand) score += 3;\r\n      \r\n      // Similar price range (within 20%)\r\n      const priceDiff = Math.abs(c.price - car.price) / car.price;\r\n      if (priceDiff < 0.2) score += 2;\r\n      \r\n      // Similar year (within 2 years)\r\n      const yearDiff = Math.abs(c.year - car.year);\r\n      if (yearDiff <= 2) score += 2;\r\n      \r\n      // Same fuel type\r\n      if (c.fuelType === car.fuelType) score += 1;\r\n      \r\n      // Same transmission\r\n      if (c.transmission === car.transmission) score += 1;\r\n      \r\n      return { car: c, score };\r\n    })\r\n    .sort((a, b) => b.score - a.score)\r\n    .slice(0, limit)\r\n    .map((item) => item.car);\r\n};\r\n"
        }
    ]
}