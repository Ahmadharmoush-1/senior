{
    "sourceFile": "src/contexts/AuthContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759427930869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759427930869,
            "name": "Commit-0",
            "content": "import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { User } from \"@/types/car\";\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (name: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing session in localStorage\r\n    const storedUser = localStorage.getItem(\"carfinder_user\");\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    // Mock login - replace with actual API call\r\n    setIsLoading(true);\r\n    \r\n    // Simulate API delay\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    \r\n    const mockUser: User = {\r\n      id: \"user-\" + Date.now(),\r\n      name: \"Test User\",\r\n      email,\r\n    };\r\n    \r\n    setUser(mockUser);\r\n    localStorage.setItem(\"carfinder_user\", JSON.stringify(mockUser));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const register = async (name: string, email: string, password: string) => {\r\n    // Mock registration - replace with actual API call\r\n    setIsLoading(true);\r\n    \r\n    // Simulate API delay\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    \r\n    const mockUser: User = {\r\n      id: \"user-\" + Date.now(),\r\n      name,\r\n      email,\r\n    };\r\n    \r\n    setUser(mockUser);\r\n    localStorage.setItem(\"carfinder_user\", JSON.stringify(mockUser));\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"carfinder_user\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout, isLoading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"
        }
    ]
}